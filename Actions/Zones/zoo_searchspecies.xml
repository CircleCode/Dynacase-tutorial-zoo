[ZONE FDL:HTMLHEAD?title=[TEXT:Special Species]]
<script type="text/javascript" src="lib/data/fdl-data.js"></script>
<script>
        var C=null; // the main context
        function searchSpecies() {
                C=new Fdl.Context();
                if (! C.isConnected()) {   
                        alert('error connect:'+C.getLastErrorMessage());
                
                }
                
                if (C){
                        var sel = document.getElementById("resultTab");
                        var d = C.getSearchDocument();
                        var f=new Fdl.DocumentFilter({family:'ZOO_ESPECE',
                                                      criteria:[{operator:'~*',
                                                                 left:'title',
                                                                  right:document.getElementById('specie').value}]});
                var dl=d.search({filter:f});
                        var content=dl.getDocuments();
                        for (var i = sel.length - 1; i>=0; i--)  sel.remove(i);
                        for (var i in content) {
                                var doc=content[i];
                                if (doc && doc.isAlive()) {
                                        var o = new Option(doc.getTitle(),doc.getProperty('id'));
                                      //  sel.options[sel.options.length]=o; 
                                                try {
                                         sel.add(o, null); // standards compliant; doesn't work in IE
                                                 }
                                                 catch(ex) {
                                                  sel.add(o); // IE only
                                                  }

                                }
                        }
                }
                autoWresize();
        }
                
        function getReference() {
           var ref=Ih.docGetFormValue('en_reference');
           
           console.log('esp√®ce',Ih.docGetFormValue('en_espece'));
           return ref;
        }
        function insertDataFromSelection() {
           var titles=[];
           var icons=[];
           var ids=[];
           
           var sel=document.getElementById("resultTab");
           
           for (var i=0;i < sel.options.length;i++) {
                  if (sel.options[i].selected){
                    var d = C.getDocument({id:sel.options[i].value, useCache:true});
                    Ih.docAddTableRow({en_espece:{id:sel.options[i].value,title:sel.options[i].text,unique:true},
                                    en_comment:'coucou',
                                    en_espprotected:(d.getValue('es_protegee')=='1')?{url:'Images/pandared.png',id:'pandared.png'}:{url:'Images/pandagreen.png',id:'pandagreen.png'},
                                    en_photo:{url:d.getDisplayValue('es_photo',{url:true}),id:d.getValue('es_photo')},
                                    en_enumcolor:'c'});
                   }
           } 
        } 
         function insertDataUsingReturnAttribute() {
           var titles=[];
           var icons=[];
           var ids=[];
           var sel=document.getElementById("resultTab");
           if (! Ih.getReturnAttribute(0)) {
                alert('no attribute results defined');
                return;
           }
           for (var i=0;i < sel.options.length;i++) {
                  if (sel.options[i].selected){
                    var d = C.getDocument({id:sel.options[i].value, useCache:true});
                    var row={};
                    // get first result attribute : the attribute 'en_espece'
                    row[Ih.getReturnAttribute(0)]={id:sel.options[i].value,title:sel.options[i].text,unique:true};
                  
                    // get second result attribute: the attribute 'en_comment'
                    row[Ih.getReturnAttribute(1)]='a comment';
                    Ih.docAddTableRow(row);
                   }
           } 
        }
        addEvent(window,"load",autoWresize);
        addEvent(window,"load",searchSpecies);
        
        function setCapacity(inp,delta) {
           if (isNaN(inp.value)) inp.value=0;
           if (delta) inp.value=parseInt(inp.value)+delta;
           Ih.docSetFormValue({en_capacite:inp.value})
        }
</script>

<h3><b>[TEXT:zoo:Species for] : [enclosname] </b></h3>
<input type="text" id="specie"/>
<input type="button" value="[TEXT:zoo:Search species]" onclick="searchSpecies()"></input> 
<br/>
<select id="resultTab" multiple="multiple">
</select>
<br/>

<input type="button" value="[TEXT:Insert into list !]" onclick="insertDataFromSelection()"></input> 
<br/>
<input id="capacity" value="[CAPACITY]"/> 
<input type="button" value="+" onclick="setCapacity(document.getElementById('capacity'),+1)"></input>
<input type="button" value="-" onclick="setCapacity(document.getElementById('capacity'),-1)"></input>
<input type="button" value="[TEXT:zoo:Change capacity]" onclick="setCapacity(document.getElementById('capacity'),null)"></input>

<input type="button" value="[TEXT:zoo:Retrieve reference]" onclick="document.getElementById('reference').value=getReference()"></input>
<input type="text" id="reference"/>
<input type="button" value="[TEXT:zoo:Insert with defined return]" onclick="insertDataUsingReturnAttribute()">


[ZONE FDL:HTMLFOOT]
